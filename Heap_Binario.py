# -*- coding: utf-8 -*-
"""HEAP_BINARIO.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13fI7pcFVwjAeXUXG3mFukahhvXsN7Rui
"""

def menor_elemento(A):
    return A[1]

def filho_esquerda(A, i):
    return A[2 * i]

def filho_direita(A, i):
    return A[2 * i + 1]

def pai(A, i):
    return A[i // 2]
  
def eh_heap(A):
    for i in range(2, len(A)):
        if A[i] > A[i // 2]:
            return False
    return True

def promove(A, n):
    i = n
    while True:
        # Elemento chegou na raiz da árvore.
        if i == 1:
            break

        # Elemento chegou na posição correta.
        p = i // 2
        if A[p] >= A[i]:
            break

        # Troca elemento de lugar com o pai.
        A[p], A[i] = A[i], A[p]
        i = p

def demove(A, n):
    i = 1
    while True:
        c = 2 * i

        # Elemento não tem mais filhos.
        if c > n:
            break

        # Encontra o índice do maior dos filhos.
        if c + 1 <= n:
            if A[c + 1] > A[c]:
                c += 1

        # O elemento é menor que seu maior filho.
        if A[i] <= A[c]:
            break

        # Troca elemento de lugar com o maior filho.
        A[c], A[i] = A[i], A[c]
        i = c

def inserir(A, valor):
  A.append(valor)
  promove(A, len(A))
  
def remover(A, valor):
  A[0], A[len(A)-1] =  A[len(A)-1], A[0]
  A.pop(len(A)-1)
  demove(A, len(A))

def heapfy(A):
    size = len(A)
    
    for i in range((size//2)-1,-1,-1):
        # Salva o valor da raiz
        root_val = A[i]             
        child = 2*i+1
        
        while(child<size):
            if child<size-1 and A[child]>A[child+1]:
                child+=1
            
            # Compara com o valor da raiz salvo
            if root_val<=A[child]:     
                break
            
            # Encontra o indice do pai
            A[(child-1)//2]=A[child]   
            child=2*child+1
            
        #Salva o valor da raiz    
        A[(child-1)//2]=root_val       
        
    return A

myheap = [5, 13, 8, 20, 30, 10, 3]

print(myheap)
heapfy(myheap)
print(myheap)